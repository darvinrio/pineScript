// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © balipour

//@version=4
study("Correlation with P-Value & Confidence Interval [pig]", "rioBA_CC", false, format.price, 3)

var invisible = color(na)
bgcolor(#000000c0)

var cPI = 2.0 * asin(1.0) // 3.1415926536 Constant


//===== Functions =====//
cc(x, y, len) => // Correlation Coefficent function
    lenMinusOne = len - 1
    meanx = 0.0, meany = 0.0
    for i=0.0 to lenMinusOne
        meanx := meanx + nz(x[i])
        meany := meany + nz(y[i])
    meanx := meanx / len
    meany := meany / len
    sumxy=0.0, sumx=0.0, sumy=0.0
    for i=0  to lenMinusOne
        sumxy := sumxy +    (nz(x[i]) - meanx) * (nz(y[i]) - meany)
        sumx  := sumx  + pow(nz(x[i]) - meanx, 2)
        sumy  := sumy  + pow(nz(y[i]) - meany, 2)
    sumxy / sqrt(sumy * sumx)

adj(r, n) => // Unbiased Adjusted R Estimation Approximate Function
    (1 + (1 - pow(r, 2)) / (2 * n)) * r

Round(src, digits) => // Round Function
    p = pow(10, digits)
    round(abs(src) * p) / p * sign(src)

xp(offset) => // Offset 
    time + round(change(time) * offset)

//label Panel Function
_label(T, color_PnL) =>
    label PnL_Label = na
    label.delete(PnL_Label[1])
    PnL_Label := label.new(time, 0.0, text=T, color=color_PnL, textcolor=color.white, size = size.normal, style=label.style_label_left, xloc=xloc.bar_time, textalign = text.align_left)
    label.set_x(PnL_Label, label.get_x(PnL_Label) + round(change(time)*3))

//===== Inputs =====//
src    = input(       close,  "========= Source =========", input.source )
//sec1in = input(       "SPX",         "Comparison Security", input.symbol , confirm=true   )
sec1in = syminfo.tickerid
mode   = input("Adjusted R",       "Correlation Variants ", input.string , options=["R", "Adjusted R"])
len    = input(          20, "Correlation Lookback Length", input.integer,  minval=2)

//Stats Settings
sc   = input(true, "Show Confidence Interval for Population", input.bool   )
csd  = input(1.96,       "Confidence Interval SD Multiplier", input.float  , minval=0.1, step=0.1)  //Default 95% 
sp   = input(true,                           "Show P-Values", input.bool   )
cp   = input(0.05,    "P-Value Significant Confidence Level", input.float  , minval=0.0, step=0.01) //Default = 1- 0.05 =  95%
pan  = input(true,                 " Show Information Panel", input.bool   )
rlen = input(  50,                      "  R Squared Length", input.integer, minval=2)
os   = input(  40,                 "  Panel Position Offset", input.integer, minval=0)
lT   = input(   1,                  "--- Line Thickness ---", input.integer, options=[1,2,3])

sec1 = security(sec1in, timeframe.period, close)


//===== Calculations =====//
R    =  cc(src, sec1, len) // Traditional Pearson
adjr = adj(  R,       len) // Adjusted R

float r = na
if(mode == "R")
    r := R
if(mode == "Adjusted R")
    r := adjr

R2    = pow(    cc(src, sec1, rlen)       , 2) // R Squared
adjR2 = pow(adj(cc(src, sec1, rlen), rlen), 2) // R Sqaured Based on Adjusted R

float r2 = na
if(mode == "R")
    r2 := R2
if(mode == "Adjusted R")
    r2 := adjR2

// Fisher Transform
z  = 0.5 * log((r + 1.0) / (1.0 - r)) // Fisher 
se = 1.0 / sqrt(len - 3)              // Standard Error
zl = z - csd * se                     // Lower Limit for fisher z
zu = z + csd * se                     // Upper Limit for fisher z 95% confidence

// Inverse Fisher Transform to Transform Back to r
rl = (exp(2.0 * zl) - 1.0) / (exp(2.0 * zl) + 1.0)   // Lower limit for r
ru = (exp(2.0 * zu) - 1.0) / (exp(2.0 * zu) + 1.0)   // Upper limit for r

//T distribution For P Value
v = len - 2
x = abs(r*sqrt(v) / (sqrt(1 - pow(r,2))))

//student t cdf
tcdf(t,df) =>
    Z = t*(1 - (1/(4*df))) * pow(1 + (1/(2*df))*pow(t,2),-0.5)
    a = 0.0
    for n = 0 to 12
        a := (1/(n+0.5)) * exp(-pow(n+0.5,2)/9)*sin((sqrt(2)/3) * (n+0.5)*Z) + a
    p = x > 7 ? 1.0 : x < -7 ? 0.0 : 0.5 + (1/math.pi)*a
    2*(1-p)

pro = tcdf(x,v)

//===== Plotting =====//
colorCC = (pro < cp and r < 0.0) ? #FF0000ff :
          (pro < cp and r > 0.0) ? #00FF00ff :
                                   #FFFFFFff
colorP  = (pro < cp) ? #FFFF00ff : #C0C0C040

plot(       sp ? pro : na, color=colorP, title="P Value", style=plot.style_columns)
plotUpper = plot(      rl, color=sc ? color.new(#00C0FFff,100) : invisible, style=plot.style_linebr, title="Confidence Interval Lower" )
plotLower = plot(      ru, color=sc ? color.new(#00C0FFff,100) : invisible, style=plot.style_linebr, title="Confidence Interval Higher")
fill(plotUpper, plotLower, color=sc ? color.new(#00C0FFff, 85) : invisible)
plot(  r,  linewidth=lT  , color=colorCC                                  , style=plot.style_areabr, title="🐷 Correlation")

plot(sp ? cp : na, color=color.new(#C0C0C0ff,30), trackprice=true, show_last=1, title="P value Threshold", style=plot.style_linebr)
plot(sp ? na :  0, color=color.new(#C0C0C0ff,30), trackprice=true, show_last=1, title="Zero Line")
hline(        1.0, color=color.new(#00FFFFff,30))
hline(       -1.0, color=color.new(#FF00FFff,30))

// Information Panel
sig() =>
    return = (pro < cp) and r > 0 ? "Significant Positive Correlation" :
             (pro < cp) and r < 0 ? "Significant Negative Correlation" :
                                           "Insignificant Correlation"

if(pan)
    txt =         "R : " + tostring(Round(r  ,3)) +
     "\n\n R Squared : " + tostring(Round(r2 ,4)) +
       "\n\n P Value : " + tostring(Round(pro,4)) +
                  "\n\n" + sig() 
    _label(txt, #000000c0)
    
plotshape(r==r[1], location=location.top, style=shape.square,  color=color.blue, transp=70)
plotshape(r>r[1], location=location.top, style=shape.triangleup, color=#00FF00ff, transp=70)
plotshape(r<r[1], location=location.top, style=shape.triangledown,  color=#FF0000ff, transp=70)

